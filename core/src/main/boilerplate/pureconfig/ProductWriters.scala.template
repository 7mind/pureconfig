package pureconfig

import com.typesafe.config._

trait ProductWriters {
  @inline private def combineWriterResult[A](
      previousResult: Config,
      writer: ConfigWriter[A],
      key: String,
      value: A): Config =
    writer match {
      case w: WritesMissingKeys[A @unchecked] =>
        w.toOpt(value) match {
          case Some(v) => previousResult.withValue(key, v)
          case None => previousResult
        }
      case _ => previousResult.withValue(key, writer.to(value))
    }

  /**
   * Builds a `ConfigWriter` for an object written as 1 key.
   *
   * @param f the function converting the source object to a value
   * @tparam B the type of the source object
   * @return a `ConfigWriter` for an object of type `B` that is written as the value
   *         generated using `f`.
   */
  // Special case because we don't want f to be B => Product1[A0].
  final def forProduct1[B, A0](keyA0: String)(f: B => A0)(implicit
    writerA0: ConfigWriter[A0]
  ): ConfigWriter[B] = new ConfigWriter[B] {
    def to(a: B): ConfigValue = {
      val values = f(a)
      val a0Conf = ConfigFactory.empty()
      val a1Conf = combineWriterResult(a0Conf, writerA0, keyA0, values)
      a1Conf.root()
    }
  }
  [2..22#
  /**
   * Builds a `ConfigWriter` for an object written as 1 keys.
   *
   * @param f the function converting the source object to a tuple of values
   * @tparam B the type of the source object
   * @return a `ConfigWriter` for an object of type `B` that is written as the values
   *         generated using `f`.
   */
  final def forProduct1[B, [#A0#]]([#keyA0: String#])(f: B => Product1[[#A0#]])(implicit
    [#writerA0: ConfigWriter[A0]#]
  ): ConfigWriter[B] = new ConfigWriter[B] {
    def to(a: B): ConfigValue = {
      val values = f(a)
      val a##0Conf = ConfigFactory.empty()
      [#val a1Conf = combineWriterResult(a0Conf, writerA0, keyA0, values._1)#
      ]
      a1Conf.root()
    }
  }#

  ]
}

object ProductWriters extends ProductWriters
