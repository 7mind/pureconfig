package pureconfig

import pureconfig.error._

trait ProductReaders {
  @inline private def combineReaderResult[B, A](
      previousResult: Either[ConfigReaderFailures, A => B],
      reader: ConfigReader[A],
      key: String,
      cursor: ConfigObjectCursor): Either[ConfigReaderFailures, B] =
    ConvertHelpers.combineResults(
      previousResult,
      if (reader.isInstanceOf[ReadsMissingKeys])
        reader.from(cursor.atKeyOrUndefined(key))
      else
        cursor.atKey(key).right.flatMap(reader.from))(_(_))

  /**
   * Builds a `ConfigReader` for an object created from the value of 1 key.
   *
   * @param f the function converting the read value to the target object
   * @tparam B the type of the target object
   * @return a `ConfigReader` for an object of type `B` that is created from the value in the
   *         provided key using `f`.
   */
  // Special case because f can't be curried.
  final def forProduct1[B, A0](keyA0: String)(f: A0 => B)(implicit
    readerA0: ConfigReader[A0]
  ): ConfigReader[B] = new ConfigReader[B] {
    def from(cur: ConfigCursor): Either[ConfigReaderFailures, B] =
      cur.asObjectCursor.right.flatMap { objCur =>
        val a0Result: Either[ConfigReaderFailures, A0 => B] = Right(f)
        val a1Result = combineReaderResult(a0Result, readerA0, keyA0, objCur)
        a1Result
      }
  }

  [2..22#/**
   * Builds a `ConfigReader` for an object created from the values of 1 keys.
   *
   * @param f the function converting the read values to the target object
   * @tparam B the type of the target object
   * @return a `ConfigReader` for an object of type `B` that is created from the values in the
   *         provided keys using `f`.
   */
  final def forProduct1[B, [#A0#]]([#keyA0: String#])(f: ([#A0#]) => B)(implicit
    [#readerA0: ConfigReader[A0]#]
  ): ConfigReader[B] = new ConfigReader[B] {
    def from(cur: ConfigCursor): Either[ConfigReaderFailures, B] =
      cur.asObjectCursor.right.flatMap { objCur =>
        val a##0Result: Either[ConfigReaderFailures, [#A0# => ] => B] = Right(f.curried)
        [#val a1Result = combineReaderResult(a0Result, readerA0, keyA0, objCur)#
        ]
        a1Result
      }
  }#

  ]
}

object ProductReaders extends ProductReaders
